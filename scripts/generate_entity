#!/usr/bin/perl
=head1 Entity template generator

Part of Pulma system

Script to generate empty template of entity to be filled with data and used via
import_data script

Copyright (C) 2011 Fedor A. Fetisov <faf@ossg.ru>. All Rights Reserved

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License

=cut

use strict;
use warnings;

use lib qw( ../ );

use Pulma::Service::Data::Parser;

use Pulma::Service::Functions;

use Getopt::Long qw(:config no_ignore_case bundling no_auto_abbrev);
use Pod::Usage;

=head1 Usage

=over

=item generate_entity --config <configuration file> --type <entity_type>

=item I<or>

=item generate_entity --help

=back

=cut

# get options
my $options = {};
our @files;

unless ( GetOptions( $options,
		     'help|h',
		     'config|c=s',
		     'type|t=s' ) ) {

    pod2usage(-exitval => 1, -verbose => 2);

}

if (exists($options->{'help'})) {

    pod2usage(-exitval => 0, -verbose => 2);

}

if ( !exists($options->{'config'}) ) {

    pod2usage(-exitval => 0, -verbose => 2);

}

if ( !exists($options->{'type'}) ) {

    pod2usage(-exitval => 0, -verbose => 2);

}

# check specified configuration file
unless (-r $options->{'config'}) {

    print STDERR
	  sprintf( "[error] Configuration file %s not exist or not readable!\n",
		   $options->{'config'} );
    exit(1);

}

# get configuration
my $config = do($options->{'config'});
if ($@) {

    print STDERR sprintf("[error] Bad configuration format: %s\n", $@);
    exit(1);

}
elsif (!defined $config) {

    print STDERR sprintf("[error] Can't read configuration: %s\n", $!);
    exit(1);

}

# initialize data parser
my $parser = Pulma::Service::Data::Parser->new();

my $entity = { 'id' => generate_entity_id( $options->{'type'},
					   $config->{'fcgi'}->{'nodeid'} ),
	       'etype' => $options->{'type'},
	       'attributes' => {} };

print $parser->encode($entity);
print "\n";
